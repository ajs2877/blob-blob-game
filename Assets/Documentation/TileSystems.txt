Blob-Blob Game | 6/19/2021

There are many tiles and some of them uses a child GameObject for collision detection with certain objects. 
This doc will attempt to give an overview on how each tile and script works.

Triggerable Script
  - Special class to be implemented by the scripts of triggerable tiles.
    Holds list of GameObjects that is hooked onto this tile. This will be set by the Door Tile and is needed for higlighting tiles to work.
	Has triggered field that you need to set to true or false based on some sort of condition in the child class.

ButtonTile Prefab - 2 GameObjects
  - Parent object hold ButtonTile script that implements Triggerable and checks if the player steps on it. 
    The script will then set triggered to be true and then set triggered to be false when stepped off or timer is finished.
	The child gameobject is a pointer for the timer in order to show how much time is left.
	The ButtonTile script uses OnTriggerStay2D to set its triggered and pressed state to true if the element on it is same size or larger than button
	Then when OnTriggerExit2D happens, pressed is set to false (and so is triggered if no timer is set).
	The FixedUpdate method is only for the timer to untrigger the button after a specified amount of time.
	
SwitchTile Prefab - 2 GameObjects
  - Parent object hold SwitchTile script that implements Triggerable and checks if the player walks past it in certain directions. 
    The script will then switch triggered between true or false based on direction or when timer is finished.
	The child gameobject is a pointer for the timer in order to show how much time is left.
	The SwitchTile script saves its starting state as its default state for the timer to work.. 
	The FixedUpdate method is only for the timer to flip the switch back to original state after a specified amount of time.
	In OnTriggerStay2D, it does nothing until an element is in the center of the switch. Then it stores what object is on it and sets primed to true.
	Then as the object is partially exiting the center of the switch, the switch runs the code to change state if it was in primed mode.
    To know what state to switch to, it compares the switch's up vector (local orientation) to the element's direction vector that it is moving in.	
	
DoorTile Prefab - 1 GameObject
  - Holds all triggers and toggle tiles connected to it in its alltriggers and allTogglers fields within DoorTile script.
    In the script, the Update method is ran and it checks all the triggers and togglers to know what state the door should be in.
    It currently uses a coroutine (think of it like a separate non-blocking method to run) that changes the door state so objects can move out of its space cleanly.
	Door does a check to make sure the player is not occupying its space so it does not close on top of the player.
	Triggers must all be triggered to change the door's state unless activateOnAnyTrigger is true where at least 1 trigger needs to be triggered instead of all. 
	Each toggler will invert the current door state.
	invertDoorState field will invert the door's behavior for opening/closing. 
	The door and all of its triggers will be highlighted if the player steps on a triggerable tile (handled in Highlighting Controller on Player)
    
PitTile - 2 GameObjects (Can only be 1x1)
  - The parent gameobject is used for blocking blob movement but allows for boulders to pass through it.
    The child gameobject is the one with the PitTile script and collision that detects boulders on it and changes state to a filled pit.
	It uses OnTriggerStay2D to check if a boulder named element is close enough to the center to know when to destroy bolder and switch to filled state.
	PitTile can only be filled by small boulders by checking if the boulder is the same size as tile.

LargePitTile - 10 GameObjects (Can only be 2x2)
  - The parent gameobject is just a container that holds 4 small pit tiles within itself.
    The child pitDetector gameobject is the one with the LargePitTile script that handles the logic in OnTriggerStay2D.
	By using 4 small pits, the small pits handle blocking blob movement and can be filled individually.
	The LargePitTile's job is to automatically fill all 4 pits if they are unfilled and a large boulder is pushed on.
	LargePitTile will also keep track of each small pit and will enable a filledSprite gameobject when a pit is filled.
	Neat system but can be tricky to understand at first. LargePitTile handles the big boulders. The 4 pits handle the small boulders and movement blocking.
	
CrackedFloorTile - 2 GameObjects
  - The parent gameobject is just for the sprite and allowing movement across itself.
    The child gameobject has CrackedFloor script which will detect if a player moved off of the tile.
	When a player gets off and triggers OnTriggerExit2D, the CrackedFloor will destroy itself and spawn a PitTile in its place.
	It will destroy itself if OnTriggerStay2D detects a boulder of the same size is pushed onto it and the PitTile spawned will automatically fill itself with the boulder.
	This tile can be 1x1 or 2x2 unlike the Pit Tiles and this script will spawn the correct pit tile for its size.

IceFloorTile - 2 GameObjects (Can only be 1x1)
  - The parent gameobject is just for the sprite and holds the FloorDetector gameobject that holds the IceFloor script.
    Blobs and Boulders has a script (PlayerController and Boulder) that extends Moveable class and hooks up its methods into their Start and Update method.
    This Moveable class works by having the Blobs and boulders keep track of when they stop moving. 
    Then once they stop, Moveable will check if they are on an Ice Tile and then call the Ice Tile's TrySlidingObject method.
    The Ice Tile will now call MoveElement on the objects if the object's previous direction given to CanMoveElement returns true.
    Thus the Ice Tile gives the impression of sliding by having the moving objects trigger the tile every time they stop at the next spot.
	
CrackedWall - 2 GameObjects
  - The parent gameobject has a script called AllowOnlyBigBlobIn that will block all elements except for big blobs. 
    The child gameobject holds the CrackedWall script and when the big blob enters partially into the wall and activates OnTriggerStay2D, the wall changes state and disables AllowOnlyBigBlobIn script.


ConditionalBlocking script 
  - Designed to be overriden by other scripts to add special filtering that may be too difficult to do with tags or layers.
    The AllowOnlyBigBlobIn script implements ConditionalBlocking and overrides CanBlockObject to prevent movement into a tile by any other moveable objects.
    The TrueGrid system looks into the gameobject for any component that implements the ConditionalBlocking script to be used for its CanMoveElement and MoveElement method.